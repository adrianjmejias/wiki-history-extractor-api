Searching 4192 files for "os.environ.get('FLASK_CONFIG')"

/home/frank/code/wiki-history-extractor-api/app/__init__.py:
    6  import os
    7  
    8: celery = Celery(__name__, broker=config[os.environ.get('FLASK_CONFIG')].CELERY_BROKER_URL,include=[__name__+'.tasks'])
    9  
   10  def create_app(config_name):

/home/frank/code/wiki-history-extractor-api/app/api_1_0/articles.py:
   11  def articles_task():
   12      '''Return the list of articles in the database.'''
   13:     db = RevisionDB(config={'host': config[os.environ.get('FLASK_CONFIG')].MONGO_HOST, 'port': config[os.environ.get('FLASK_CONFIG')].MONGO_PORT, 'username': config[os.environ.get('FLASK_CONFIG')].MONGO_USERNAME, 'password': config[os.environ.get('FLASK_CONFIG')].MONGO_PASSWORD})
   14      arts=db.find_articles(None)
   15      #convert the collection of articles to a json response 
   ..
   24  def article_info(page_id):
   25      '''Return the information of the Article in the database with the given page_id.'''
   26:     db = RevisionDB(config={'host': config[os.environ.get('FLASK_CONFIG')].MONGO_HOST, 'port': config[os.environ.get('FLASK_CONFIG')].MONGO_PORT, 'username': config[os.environ.get('FLASK_CONFIG')].MONGO_USERNAME, 'password': config[os.environ.get('FLASK_CONFIG')].MONGO_PASSWORD})
   27      query={'pageid':int(page_id)}
   28      arts=db.find_articles(query)

/home/frank/code/wiki-history-extractor-api/app/api_1_0/revisions.py:
   14          page = 1
   15  
   16:     db = RevisionDB(config={'host': config[os.environ.get('FLASK_CONFIG')].MONGO_HOST, 'port': config[os.environ.get('FLASK_CONFIG')].MONGO_PORT, 'username': config[os.environ.get('FLASK_CONFIG')].MONGO_USERNAME, 'password': config[os.environ.get('FLASK_CONFIG')].MONGO_PASSWORD})
   17  
   18      revisions = db.paginate(page)

/home/frank/code/wiki-history-extractor-api/app/api_1_0/views.py:
   19  def test():
   20  	'''Testing function'''
   21: 	db = RevisionDB(config={'host': config[os.environ.get('FLASK_CONFIG')].MONGO_HOST, 'port': config[os.environ.get('FLASK_CONFIG')].MONGO_PORT, 'username': config[os.environ.get('FLASK_CONFIG')].MONGO_USERNAME, 'password': config[os.environ.get('FLASK_CONFIG')].MONGO_PASSWORD})
   22  
   23  	# Number of revisions to process

/home/frank/code/wiki-history-extractor-api/local/app/__init__.py:
    6  import os
    7  
    8: celery = Celery(__name__, broker=config[os.environ.get('FLASK_CONFIG')].CELERY_BROKER_URL,include=[__name__+'.tasks'])
    9  
   10  def create_app(config_name):

/home/frank/code/wiki-history-extractor-api/local/app/api_1_0/articles.py:
   11  def articles_task():
   12      '''Return the list of articles in the database.'''
   13:     db = RevisionDB(config={'host': config[os.environ.get('FLASK_CONFIG')].MONGO_HOST, 'port': config[os.environ.get('FLASK_CONFIG')].MONGO_PORT, 'username': config[os.environ.get('FLASK_CONFIG')].MONGO_USERNAME, 'password': config[os.environ.get('FLASK_CONFIG')].MONGO_PASSWORD})
   14      arts=db.find_articles(None)
   15      #convert the collection of articles to a json response 
   ..
   24  def article_info(page_id):
   25      '''Return the information of the Article in the database with the given page_id.'''
   26:     db = RevisionDB(config={'host': config[os.environ.get('FLASK_CONFIG')].MONGO_HOST, 'port': config[os.environ.get('FLASK_CONFIG')].MONGO_PORT, 'username': config[os.environ.get('FLASK_CONFIG')].MONGO_USERNAME, 'password': config[os.environ.get('FLASK_CONFIG')].MONGO_PASSWORD})
   27      query={'pageid':int(page_id)}
   28      arts=db.find_articles(query)

/home/frank/code/wiki-history-extractor-api/local/app/api_1_0/revisions.py:
   14          page = 1
   15  
   16:     db = RevisionDB(config={'host': config[os.environ.get('FLASK_CONFIG')].MONGO_HOST, 'port': config[os.environ.get('FLASK_CONFIG')].MONGO_PORT, 'username': config[os.environ.get('FLASK_CONFIG')].MONGO_USERNAME, 'password': config[os.environ.get('FLASK_CONFIG')].MONGO_PASSWORD})
   17  
   18      revisions = db.paginate(page)

/home/frank/code/wiki-history-extractor-api/local/app/api_1_0/views.py:
   19  def test():
   20  	'''Testing function'''
   21: 	db = RevisionDB(config={'host': config[os.environ.get('FLASK_CONFIG')].MONGO_HOST, 'port': config[os.environ.get('FLASK_CONFIG')].MONGO_PORT, 'username': config[os.environ.get('FLASK_CONFIG')].MONGO_USERNAME, 'password': config[os.environ.get('FLASK_CONFIG')].MONGO_PASSWORD})
   22  
   23  	# Number of revisions to process

34 matches across 8 files


Searching 4192 files for "os.environ.get('FLASK_CONFIG')"

/home/frank/code/wiki-history-extractor-api/app/__init__.py:
    6  import os
    7  
    8: celery = Celery(__name__, broker=config[os.environ.get('FLASK_CONFIG')].CELERY_BROKER_URL,include=[__name__+'.tasks'])
    9  
   10  def create_app(config_name):

/home/frank/code/wiki-history-extractor-api/app/api_1_0/articles.py:
   11  def articles_task():
   12      '''Return the list of articles in the database.'''
   13:     db = RevisionDB(config={'host': config[os.environ.get('FLASK_CONFIG')].MONGO_HOST, 'port': config[os.environ.get('FLASK_CONFIG')].MONGO_PORT, 'username': config[os.environ.get('FLASK_CONFIG')].MONGO_USERNAME, 'password': config[os.environ.get('FLASK_CONFIG')].MONGO_PASSWORD})
   14      arts=db.find_articles(None)
   15      #convert the collection of articles to a json response 
   ..
   24  def article_info(page_id):
   25      '''Return the information of the Article in the database with the given page_id.'''
   26:     db = RevisionDB(config={'host': config[os.environ.get('FLASK_CONFIG')].MONGO_HOST, 'port': config[os.environ.get('FLASK_CONFIG')].MONGO_PORT, 'username': config[os.environ.get('FLASK_CONFIG')].MONGO_USERNAME, 'password': config[os.environ.get('FLASK_CONFIG')].MONGO_PASSWORD})
   27      query={'pageid':int(page_id)}
   28      arts=db.find_articles(query)

/home/frank/code/wiki-history-extractor-api/app/api_1_0/revisions.py:
   14          page = 1
   15  
   16:     db = RevisionDB(config={'host': config[os.environ.get('FLASK_CONFIG')].MONGO_HOST, 'port': config[os.environ.get('FLASK_CONFIG')].MONGO_PORT, 'username': config[os.environ.get('FLASK_CONFIG')].MONGO_USERNAME, 'password': config[os.environ.get('FLASK_CONFIG')].MONGO_PASSWORD})
   17  
   18      revisions = db.paginate(page)

/home/frank/code/wiki-history-extractor-api/app/api_1_0/views.py:
   19  def test():
   20  	'''Testing function'''
   21: 	db = RevisionDB(config={'host': config[os.environ.get('FLASK_CONFIG')].MONGO_HOST, 'port': config[os.environ.get('FLASK_CONFIG')].MONGO_PORT, 'username': config[os.environ.get('FLASK_CONFIG')].MONGO_USERNAME, 'password': config[os.environ.get('FLASK_CONFIG')].MONGO_PASSWORD})
   22  
   23  	# Number of revisions to process

/home/frank/code/wiki-history-extractor-api/local/app/__init__.py:
    6  import os
    7  
    8: celery = Celery(__name__, broker=config[os.environ.get('FLASK_CONFIG')].CELERY_BROKER_URL,include=[__name__+'.tasks'])
    9  
   10  def create_app(config_name):

/home/frank/code/wiki-history-extractor-api/local/app/api_1_0/articles.py:
   11  def articles_task():
   12      '''Return the list of articles in the database.'''
   13:     db = RevisionDB(config={'host': config[os.environ.get('FLASK_CONFIG')].MONGO_HOST, 'port': config[os.environ.get('FLASK_CONFIG')].MONGO_PORT, 'username': config[os.environ.get('FLASK_CONFIG')].MONGO_USERNAME, 'password': config[os.environ.get('FLASK_CONFIG')].MONGO_PASSWORD})
   14      arts=db.find_articles(None)
   15      #convert the collection of articles to a json response 
   ..
   24  def article_info(page_id):
   25      '''Return the information of the Article in the database with the given page_id.'''
   26:     db = RevisionDB(config={'host': config[os.environ.get('FLASK_CONFIG')].MONGO_HOST, 'port': config[os.environ.get('FLASK_CONFIG')].MONGO_PORT, 'username': config[os.environ.get('FLASK_CONFIG')].MONGO_USERNAME, 'password': config[os.environ.get('FLASK_CONFIG')].MONGO_PASSWORD})
   27      query={'pageid':int(page_id)}
   28      arts=db.find_articles(query)

/home/frank/code/wiki-history-extractor-api/local/app/api_1_0/revisions.py:
   14          page = 1
   15  
   16:     db = RevisionDB(config={'host': config[os.environ.get('FLASK_CONFIG')].MONGO_HOST, 'port': config[os.environ.get('FLASK_CONFIG')].MONGO_PORT, 'username': config[os.environ.get('FLASK_CONFIG')].MONGO_USERNAME, 'password': config[os.environ.get('FLASK_CONFIG')].MONGO_PASSWORD})
   17  
   18      revisions = db.paginate(page)

/home/frank/code/wiki-history-extractor-api/local/app/api_1_0/views.py:
   19  def test():
   20  	'''Testing function'''
   21: 	db = RevisionDB(config={'host': config[os.environ.get('FLASK_CONFIG')].MONGO_HOST, 'port': config[os.environ.get('FLASK_CONFIG')].MONGO_PORT, 'username': config[os.environ.get('FLASK_CONFIG')].MONGO_USERNAME, 'password': config[os.environ.get('FLASK_CONFIG')].MONGO_PASSWORD})
   22  
   23  	# Number of revisions to process

34 matches across 8 files


Searching 4192 files for "os.environ.get('FLASK_CONFIG')"

/home/frank/code/wiki-history-extractor-api/app/__init__.py:
    5  from vendors.db_connector import RevisionDB
    6  
    7: celery = Celery(__name__, broker=config[os.environ.get('FLASK_CONFIG')].CELERY_BROKER_URL,include=[__name__+'.tasks'])
    8  
    9  def create_app(config_name):

/home/frank/code/wiki-history-extractor-api/local/app/__init__.py:
    5  from vendors.db_connector import RevisionDB
    6  
    7: celery = Celery(__name__, broker=config[os.environ.get('FLASK_CONFIG')].CELERY_BROKER_URL,include=[__name__+'.tasks'])
    8  
    9  def create_app(config_name):

2 matches across 2 files


Searching 4192 files for "config['default']"

/home/frank/code/wiki-history-extractor-api/app/__init__.py:
   11      app.config.from_object(config[config_name])
   12      config[config_name].init_app(app)
   13:     config['default'] = config[config_name]
   14  
   15      celery.conf.update(app.config)

/home/frank/code/wiki-history-extractor-api/app/api_1_0/articles.py:
   11  def articles_task():
   12      '''Return the list of articles in the database.'''
   13:     db = RevisionDB(config={'host': config['default'].MONGO_HOST, 'port': config['default'].MONGO_PORT, 'username': config['default'].MONGO_USERNAME, 'password': config['default'].MONGO_PASSWORD})
   14      arts=db.find_articles(None)
   15      #convert the collection of articles to a json response 
   ..
   24  def article_info(page_id):
   25      '''Return the information of the Article in the database with the given page_id.'''
   26:     db = RevisionDB(config={'host': config['default'].MONGO_HOST, 'port': config['default'].MONGO_PORT, 'username': config['default'].MONGO_USERNAME, 'password': config['default'].MONGO_PASSWORD})
   27      query={'pageid':int(page_id)}
   28      arts=db.find_articles(query)

/home/frank/code/wiki-history-extractor-api/app/api_1_0/revisions.py:
   14          page = 1
   15  
   16:     db = RevisionDB(config={'host': config['default'].MONGO_HOST, 'port': config['default'].MONGO_PORT, 'username': config['default'].MONGO_USERNAME, 'password': config['default'].MONGO_PASSWORD})
   17  
   18      revisions = db.paginate(page)

/home/frank/code/wiki-history-extractor-api/app/api_1_0/views.py:
   19  def test():
   20  	'''Testing function'''
   21: 	db = RevisionDB(config={'host': config['default'].MONGO_HOST, 'port': config['default'].MONGO_PORT, 'username': config['default'].MONGO_USERNAME, 'password': config['default'].MONGO_PASSWORD})
   22  
   23  	# Number of revisions to process

/home/frank/code/wiki-history-extractor-api/app/cronjobs/revisit.py:
  117  				extract_article.delay(document['_id'])
  118  
  119: db = RevisionDB(config={'host': config[config['default']].MONGO_HOST, 'port': config[config['default']].MONGO_PORT, 'username': config[config['default']].MONGO_USERNAME, 'password': config[config['default']].MONGO_PASSWORD})
  120  
  121  # Run algorithm

/home/frank/code/wiki-history-extractor-api/app/tasks/app_tasks.py:
   24  def extract_article(self, title):
   25  
   26:     db = RevisionDB(config={'host': config[config['default']].MONGO_HOST, 'port': config[config['default']].MONGO_PORT, 'username': config[config['default']].MONGO_USERNAME, 'password': config[config['default']].MONGO_PASSWORD})
   27  
   28      extractor = RevisionExtractor(payload={'titles': title},title=title, db=db)
   ..
   35  def clean_revisions(self, title):
   36  
   37:     db = RevisionDB(config={'host': config[config['default']].MONGO_HOST, 'port': config[config['default']].MONGO_PORT, 'username': config[config['default']].MONGO_USERNAME, 'password': config[config['default']].MONGO_PASSWORD})
   38  
   39      db.find_query({formatted: False})
   ..
   46  def count_task(self,code,values):
   47  
   48:     db = RevisionDB(config={'host': config[config['default']].MONGO_HOST, 'port': config[config['default']].MONGO_PORT, 'username': config[config['default']].MONGO_USERNAME, 'password': config[config['default']].MONGO_PASSWORD})
   49      #instantiate a new QueryHandler to get execute the corresponding function
   50      handler = QueryHandler(db=db)
   ..
   57  def avg_task(self,code,values):
   58  
   59:     db = RevisionDB(config={'host': config[config['default']].MONGO_HOST, 'port': config[config['default']].MONGO_PORT, 'username': config[config['default']].MONGO_USERNAME, 'password': config[config['default']].MONGO_PASSWORD})
   60      #instantiate a new QueryHandler to get execute the corresponding function
   61      handler = QueryHandler(db=db)
   ..
   68  def mode_task(self,attribute,code,values):
   69  
   70:     db = RevisionDB(config={'host': config[config['default']].MONGO_HOST, 'port': config[config['default']].MONGO_PORT, 'username': config[config['default']].MONGO_USERNAME, 'password': config[config['default']].MONGO_PASSWORD})
   71      #instantiate a new QueryHandler to get execute the corresponding function
   72      handler = QueryHandler(db=db)

/home/frank/code/wiki-history-extractor-api/local/app/__init__.py:
   11      app.config.from_object(config[config_name])
   12      config[config_name].init_app(app)
   13:     config['default'] = config[config_name]
   14  
   15      celery.conf.update(app.config)

/home/frank/code/wiki-history-extractor-api/local/app/api_1_0/articles.py:
   11  def articles_task():
   12      '''Return the list of articles in the database.'''
   13:     db = RevisionDB(config={'host': config['default'].MONGO_HOST, 'port': config['default'].MONGO_PORT, 'username': config['default'].MONGO_USERNAME, 'password': config['default'].MONGO_PASSWORD})
   14      arts=db.find_articles(None)
   15      #convert the collection of articles to a json response 
   ..
   24  def article_info(page_id):
   25      '''Return the information of the Article in the database with the given page_id.'''
   26:     db = RevisionDB(config={'host': config['default'].MONGO_HOST, 'port': config['default'].MONGO_PORT, 'username': config['default'].MONGO_USERNAME, 'password': config['default'].MONGO_PASSWORD})
   27      query={'pageid':int(page_id)}
   28      arts=db.find_articles(query)

/home/frank/code/wiki-history-extractor-api/local/app/api_1_0/revisions.py:
   14          page = 1
   15  
   16:     db = RevisionDB(config={'host': config['default'].MONGO_HOST, 'port': config['default'].MONGO_PORT, 'username': config['default'].MONGO_USERNAME, 'password': config['default'].MONGO_PASSWORD})
   17  
   18      revisions = db.paginate(page)

/home/frank/code/wiki-history-extractor-api/local/app/api_1_0/views.py:
   19  def test():
   20  	'''Testing function'''
   21: 	db = RevisionDB(config={'host': config['default'].MONGO_HOST, 'port': config['default'].MONGO_PORT, 'username': config['default'].MONGO_USERNAME, 'password': config['default'].MONGO_PASSWORD})
   22  
   23  	# Number of revisions to process

/home/frank/code/wiki-history-extractor-api/local/app/cronjobs/revisit.py:
  117  				extract_article.delay(document['_id'])
  118  
  119: db = RevisionDB(config={'host': config[config['default']].MONGO_HOST, 'port': config[config['default']].MONGO_PORT, 'username': config[config['default']].MONGO_USERNAME, 'password': config[config['default']].MONGO_PASSWORD})
  120  
  121  # Run algorithm

/home/frank/code/wiki-history-extractor-api/local/app/tasks/app_tasks.py:
   24  def extract_article(self, title):
   25  
   26:     db = RevisionDB(config={'host': config[config['default']].MONGO_HOST, 'port': config[config['default']].MONGO_PORT, 'username': config[config['default']].MONGO_USERNAME, 'password': config[config['default']].MONGO_PASSWORD})
   27  
   28      extractor = RevisionExtractor(payload={'titles': title},title=title, db=db)
   ..
   35  def clean_revisions(self, title):
   36  
   37:     db = RevisionDB(config={'host': config[config['default']].MONGO_HOST, 'port': config[config['default']].MONGO_PORT, 'username': config[config['default']].MONGO_USERNAME, 'password': config[config['default']].MONGO_PASSWORD})
   38  
   39      db.find_query({formatted: False})
   ..
   46  def count_task(self,code,values):
   47  
   48:     db = RevisionDB(config={'host': config[config['default']].MONGO_HOST, 'port': config[config['default']].MONGO_PORT, 'username': config[config['default']].MONGO_USERNAME, 'password': config[config['default']].MONGO_PASSWORD})
   49      #instantiate a new QueryHandler to get execute the corresponding function
   50      handler = QueryHandler(db=db)
   ..
   57  def avg_task(self,code,values):
   58  
   59:     db = RevisionDB(config={'host': config[config['default']].MONGO_HOST, 'port': config[config['default']].MONGO_PORT, 'username': config[config['default']].MONGO_USERNAME, 'password': config[config['default']].MONGO_PASSWORD})
   60      #instantiate a new QueryHandler to get execute the corresponding function
   61      handler = QueryHandler(db=db)
   ..
   68  def mode_task(self,attribute,code,values):
   69  
   70:     db = RevisionDB(config={'host': config[config['default']].MONGO_HOST, 'port': config[config['default']].MONGO_PORT, 'username': config[config['default']].MONGO_USERNAME, 'password': config[config['default']].MONGO_PASSWORD})
   71      #instantiate a new QueryHandler to get execute the corresponding function
   72      handler = QueryHandler(db=db)

82 matches across 12 files


Searching 4192 files for "config[config['default']"

/home/frank/code/wiki-history-extractor-api/app/cronjobs/revisit.py:
  117  				extract_article.delay(document['_id'])
  118  
  119: db = RevisionDB(config={'host': config[config['default']].MONGO_HOST, 'port': config[config['default']].MONGO_PORT, 'username': config[config['default']].MONGO_USERNAME, 'password': config[config['default']].MONGO_PASSWORD})
  120  
  121  # Run algorithm

/home/frank/code/wiki-history-extractor-api/app/tasks/app_tasks.py:
   24  def extract_article(self, title):
   25  
   26:     db = RevisionDB(config={'host': config[config['default']].MONGO_HOST, 'port': config[config['default']].MONGO_PORT, 'username': config[config['default']].MONGO_USERNAME, 'password': config[config['default']].MONGO_PASSWORD})
   27  
   28      extractor = RevisionExtractor(payload={'titles': title},title=title, db=db)
   ..
   35  def clean_revisions(self, title):
   36  
   37:     db = RevisionDB(config={'host': config[config['default']].MONGO_HOST, 'port': config[config['default']].MONGO_PORT, 'username': config[config['default']].MONGO_USERNAME, 'password': config[config['default']].MONGO_PASSWORD})
   38  
   39      db.find_query({formatted: False})
   ..
   46  def count_task(self,code,values):
   47  
   48:     db = RevisionDB(config={'host': config[config['default']].MONGO_HOST, 'port': config[config['default']].MONGO_PORT, 'username': config[config['default']].MONGO_USERNAME, 'password': config[config['default']].MONGO_PASSWORD})
   49      #instantiate a new QueryHandler to get execute the corresponding function
   50      handler = QueryHandler(db=db)
   ..
   57  def avg_task(self,code,values):
   58  
   59:     db = RevisionDB(config={'host': config[config['default']].MONGO_HOST, 'port': config[config['default']].MONGO_PORT, 'username': config[config['default']].MONGO_USERNAME, 'password': config[config['default']].MONGO_PASSWORD})
   60      #instantiate a new QueryHandler to get execute the corresponding function
   61      handler = QueryHandler(db=db)
   ..
   68  def mode_task(self,attribute,code,values):
   69  
   70:     db = RevisionDB(config={'host': config[config['default']].MONGO_HOST, 'port': config[config['default']].MONGO_PORT, 'username': config[config['default']].MONGO_USERNAME, 'password': config[config['default']].MONGO_PASSWORD})
   71      #instantiate a new QueryHandler to get execute the corresponding function
   72      handler = QueryHandler(db=db)

/home/frank/code/wiki-history-extractor-api/local/app/cronjobs/revisit.py:
  117  				extract_article.delay(document['_id'])
  118  
  119: db = RevisionDB(config={'host': config[config['default']].MONGO_HOST, 'port': config[config['default']].MONGO_PORT, 'username': config[config['default']].MONGO_USERNAME, 'password': config[config['default']].MONGO_PASSWORD})
  120  
  121  # Run algorithm

/home/frank/code/wiki-history-extractor-api/local/app/tasks/app_tasks.py:
   24  def extract_article(self, title):
   25  
   26:     db = RevisionDB(config={'host': config[config['default']].MONGO_HOST, 'port': config[config['default']].MONGO_PORT, 'username': config[config['default']].MONGO_USERNAME, 'password': config[config['default']].MONGO_PASSWORD})
   27  
   28      extractor = RevisionExtractor(payload={'titles': title},title=title, db=db)
   ..
   35  def clean_revisions(self, title):
   36  
   37:     db = RevisionDB(config={'host': config[config['default']].MONGO_HOST, 'port': config[config['default']].MONGO_PORT, 'username': config[config['default']].MONGO_USERNAME, 'password': config[config['default']].MONGO_PASSWORD})
   38  
   39      db.find_query({formatted: False})
   ..
   46  def count_task(self,code,values):
   47  
   48:     db = RevisionDB(config={'host': config[config['default']].MONGO_HOST, 'port': config[config['default']].MONGO_PORT, 'username': config[config['default']].MONGO_USERNAME, 'password': config[config['default']].MONGO_PASSWORD})
   49      #instantiate a new QueryHandler to get execute the corresponding function
   50      handler = QueryHandler(db=db)
   ..
   57  def avg_task(self,code,values):
   58  
   59:     db = RevisionDB(config={'host': config[config['default']].MONGO_HOST, 'port': config[config['default']].MONGO_PORT, 'username': config[config['default']].MONGO_USERNAME, 'password': config[config['default']].MONGO_PASSWORD})
   60      #instantiate a new QueryHandler to get execute the corresponding function
   61      handler = QueryHandler(db=db)
   ..
   68  def mode_task(self,attribute,code,values):
   69  
   70:     db = RevisionDB(config={'host': config[config['default']].MONGO_HOST, 'port': config[config['default']].MONGO_PORT, 'username': config[config['default']].MONGO_USERNAME, 'password': config[config['default']].MONGO_PASSWORD})
   71      #instantiate a new QueryHandler to get execute the corresponding function
   72      handler = QueryHandler(db=db)

48 matches across 4 files


Searching 4192 files for "config[config['default']]"

/home/frank/code/wiki-history-extractor-api/app/cronjobs/revisit.py:
  117  				extract_article.delay(document['_id'])
  118  
  119: db = RevisionDB(config={'host': config[config['default']].MONGO_HOST, 'port': config[config['default']].MONGO_PORT, 'username': config[config['default']].MONGO_USERNAME, 'password': config[config['default']].MONGO_PASSWORD})
  120  
  121  # Run algorithm

/home/frank/code/wiki-history-extractor-api/app/tasks/app_tasks.py:
   24  def extract_article(self, title):
   25  
   26:     db = RevisionDB(config={'host': config[config['default']].MONGO_HOST, 'port': config[config['default']].MONGO_PORT, 'username': config[config['default']].MONGO_USERNAME, 'password': config[config['default']].MONGO_PASSWORD})
   27  
   28      extractor = RevisionExtractor(payload={'titles': title},title=title, db=db)
   ..
   35  def clean_revisions(self, title):
   36  
   37:     db = RevisionDB(config={'host': config[config['default']].MONGO_HOST, 'port': config[config['default']].MONGO_PORT, 'username': config[config['default']].MONGO_USERNAME, 'password': config[config['default']].MONGO_PASSWORD})
   38  
   39      db.find_query({formatted: False})
   ..
   46  def count_task(self,code,values):
   47  
   48:     db = RevisionDB(config={'host': config[config['default']].MONGO_HOST, 'port': config[config['default']].MONGO_PORT, 'username': config[config['default']].MONGO_USERNAME, 'password': config[config['default']].MONGO_PASSWORD})
   49      #instantiate a new QueryHandler to get execute the corresponding function
   50      handler = QueryHandler(db=db)
   ..
   57  def avg_task(self,code,values):
   58  
   59:     db = RevisionDB(config={'host': config[config['default']].MONGO_HOST, 'port': config[config['default']].MONGO_PORT, 'username': config[config['default']].MONGO_USERNAME, 'password': config[config['default']].MONGO_PASSWORD})
   60      #instantiate a new QueryHandler to get execute the corresponding function
   61      handler = QueryHandler(db=db)
   ..
   68  def mode_task(self,attribute,code,values):
   69  
   70:     db = RevisionDB(config={'host': config[config['default']].MONGO_HOST, 'port': config[config['default']].MONGO_PORT, 'username': config[config['default']].MONGO_USERNAME, 'password': config[config['default']].MONGO_PASSWORD})
   71      #instantiate a new QueryHandler to get execute the corresponding function
   72      handler = QueryHandler(db=db)

/home/frank/code/wiki-history-extractor-api/local/app/cronjobs/revisit.py:
  117  				extract_article.delay(document['_id'])
  118  
  119: db = RevisionDB(config={'host': config[config['default']].MONGO_HOST, 'port': config[config['default']].MONGO_PORT, 'username': config[config['default']].MONGO_USERNAME, 'password': config[config['default']].MONGO_PASSWORD})
  120  
  121  # Run algorithm

/home/frank/code/wiki-history-extractor-api/local/app/tasks/app_tasks.py:
   24  def extract_article(self, title):
   25  
   26:     db = RevisionDB(config={'host': config[config['default']].MONGO_HOST, 'port': config[config['default']].MONGO_PORT, 'username': config[config['default']].MONGO_USERNAME, 'password': config[config['default']].MONGO_PASSWORD})
   27  
   28      extractor = RevisionExtractor(payload={'titles': title},title=title, db=db)
   ..
   35  def clean_revisions(self, title):
   36  
   37:     db = RevisionDB(config={'host': config[config['default']].MONGO_HOST, 'port': config[config['default']].MONGO_PORT, 'username': config[config['default']].MONGO_USERNAME, 'password': config[config['default']].MONGO_PASSWORD})
   38  
   39      db.find_query({formatted: False})
   ..
   46  def count_task(self,code,values):
   47  
   48:     db = RevisionDB(config={'host': config[config['default']].MONGO_HOST, 'port': config[config['default']].MONGO_PORT, 'username': config[config['default']].MONGO_USERNAME, 'password': config[config['default']].MONGO_PASSWORD})
   49      #instantiate a new QueryHandler to get execute the corresponding function
   50      handler = QueryHandler(db=db)
   ..
   57  def avg_task(self,code,values):
   58  
   59:     db = RevisionDB(config={'host': config[config['default']].MONGO_HOST, 'port': config[config['default']].MONGO_PORT, 'username': config[config['default']].MONGO_USERNAME, 'password': config[config['default']].MONGO_PASSWORD})
   60      #instantiate a new QueryHandler to get execute the corresponding function
   61      handler = QueryHandler(db=db)
   ..
   68  def mode_task(self,attribute,code,values):
   69  
   70:     db = RevisionDB(config={'host': config[config['default']].MONGO_HOST, 'port': config[config['default']].MONGO_PORT, 'username': config[config['default']].MONGO_USERNAME, 'password': config[config['default']].MONGO_PASSWORD})
   71      #instantiate a new QueryHandler to get execute the corresponding function
   72      handler = QueryHandler(db=db)

48 matches across 4 files
